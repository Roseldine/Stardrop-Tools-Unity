
[UnityEngine.RequireComponent(typeof(StardropTools.EventStateMachine.EventStateMachine))]
public class GameManager : SingletonCoreStatedManager<GameManager>
{
    #region Events
    // Idle
    public static CoreEvent OnEnterIdle { get; private set; }
    public static CoreEvent OnExitIdle { get; private set; }
    public static CoreEvent OnUpdateIdle { get; private set; }

    // Play
    public static CoreEvent OnEnterPlay { get; private set; }
    public static CoreEvent OnExitPlay { get; private set; }
    public static CoreEvent OnUpdatePlay { get; private set; }

    // Finish
    public static CoreEvent OnEnterFinish { get; private set; }
    public static CoreEvent OnExitFinish { get; private set; }
    public static CoreEvent OnUpdateFinish { get; private set; }

    // Fixed Update
    public static CoreEvent OnFixedUpdateIdle { get; private set; }
    public static CoreEvent OnFixedUpdatePlay { get; private set; }
    public static CoreEvent OnFixedUpdateFinish { get; private set; }

    // win & lose conditions
    public static readonly CoreEvent OnWin = new CoreEvent();
    public static readonly CoreEvent OnLose = new CoreEvent();

    // add points
    public static readonly CoreEvent<int> OnPointAdd = new CoreEvent<int>();
    public static readonly CoreEvent<int> OnGemAdd = new CoreEvent<int>();

    // next level
    public static readonly CoreEvent OnNextLevel = new CoreEvent();
    public static readonly CoreEvent OnRestartLevel = new CoreEvent();
    #endregion // Events

    public float TimeInIdle { get => GetState(0).TimeInState; }
    public float TimeInPlay { get => GetState(1).TimeInState; }
    public float TimeInFinish { get => GetState(2).TimeInState; }

    public override void Initialize()
    {
        base.Initialize();
        SubscribeToEvents();
    }

    public override void SubscribeToEvents()
    {
        base.SubscribeToEvents();

        // Enter
        OnEnterIdle = SyncEventEnter(0);
        OnEnterPlay = SyncEventEnter(1);
        OnEnterFinish = SyncEventEnter(2);

        // Exit
        OnExitIdle = SyncEventExit(0);
        OnExitPlay = SyncEventExit(1);
        OnExitFinish = SyncEventExit(2);

        // Update
        OnUpdateIdle = SyncEventUpdate(0);
        OnUpdatePlay = SyncEventUpdate(1);
        OnUpdateFinish = SyncEventUpdate(2);
    }

    /// <summary>
    /// 0-idle, 1-play, 2-finish
    /// </summary>
    public override void ChangeState(int stateIndex)
        => base.ChangeState(stateIndex);

    protected override void OnValidate()
    {
        base.OnValidate();

        if (eStateMachine == null)
            eStateMachine = GetComponent<StardropTools.EventStateMachine.EventStateMachine>();
    }
}