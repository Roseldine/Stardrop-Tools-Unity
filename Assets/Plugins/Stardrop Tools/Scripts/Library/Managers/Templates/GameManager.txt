
using StardropTools;

public class GameManager : StardropTools.Singletons.SingletonManagerStateMachined<GameManager>
{
    [UnityEngine.SerializeField] UnityEngine.Transform parentManagers;
    [UnityEngine.SerializeField] CoreManager[] managers;


    #region Events
    public static CoreEvent OnIdleEnter { get; private set; }
    public static CoreEvent OnIdleUpdate { get; private set; }
    public static CoreEvent OnIdleExit { get; private set; }

    public static CoreEvent OnPlayEnter { get; private set; }
    public static CoreEvent OnPlayUpdate { get; private set; }
    public static CoreEvent OnPlayExit { get; private set; }

    public static CoreEvent OnFinishEnter { get; private set; }
    public static CoreEvent OnFinishUpdate { get; private set; }
    public static CoreEvent OnFinishExit { get; private set; }

    public static CoreEvent OnPauseEnter { get; private set; }
    public static CoreEvent OnPauseUpdate { get; private set; }
    public static CoreEvent OnPauseExit { get; private set; }

    #endregion // events


    public override void Initialize()
    {
        SynceEvents();
        base.Initialize();

        eventStateMachine.Initialize();
        LoopManager.OnUpdate.AddListener(eventStateMachine.UpdateStateMachine);

        GetManagers();
        InitializeManagers();
        LateInitializeManagers();
    }

    public override void LateInitialize()
    {
        base.LateInitialize();
    }


    void SynceEvents()
    {
        if (IsInitialized)
            return;

        OnIdleEnter = SyncEnter(0);
        OnIdleUpdate = SyncUpdate(0);
        OnIdleExit = SyncExit(0);

        OnPlayEnter = SyncEnter(1);
        OnPlayUpdate = SyncUpdate(1);
        OnPlayExit = SyncExit(1);

        OnFinishEnter = SyncEnter(2);
        OnFinishUpdate = SyncUpdate(2);
        OnFinishExit = SyncExit(2);

        OnPauseEnter = SyncEnter(3);
        OnPauseUpdate = SyncUpdate(3);
        OnPauseExit = SyncExit(3);
    }



    void GetManagers()
        => managers = GetItems<CoreManager>(parentManagers);

    void InitializeManagers()
    {
        if (managers.Exists())
            for (int i = 0; i < managers.Length; i++)
                managers[i].Initialize();
    }

    void LateInitializeManagers()
    {
        if (managers.Exists())
            for (int i = 0; i < managers.Length; i++)
                managers[i].LateInitialize();
    }
}
